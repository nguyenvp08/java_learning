{
    "sections": [
        {
            "id": "1",
            "lesson_id": "1",
            "media_type": "1",
            "text": "<h1>\tSource File</h1>All Java source file must end with an \".java\" extension. A source file should contain on public class defination, and also the class name should match the unextended filename.",
            "image": ""
        },
        {
            "id": "2",
            "lesson_id": "1",
            "media_type": "1",
            "text": "Three top-level elements known as compilation units may occur in a file. None of them is required, but the order must follow the rule:<br/><b>1.</b>\tPackage declaration<br/><b>2.</b>\tImport statements<br/><b>3.</b>\tClass, interface and enum definitions",
            "image": ""
        },
        {
            "id": "3",
            "lesson_id": "1",
            "media_type": "1",
            "text": "The keyword \"package\" occurs first and is follow by package name. You can import a class in package or the entire package, just simply place the fully class name after import keyword.",
            "image": ""
        },
        {
            "id": "4",
            "lesson_id": "1",
            "media_type": "1",
            "text": "Example for a Java source file : ",
            "image": ""
        },
        {
            "id": "5",
            "lesson_id": "1",
            "media_type": "3",
            "text": "",
            "image": "image/image_1.png"
        },
        {
            "id": "6",
            "lesson_id": "2",
            "media_type": "1",
            "text": "<h1>\tKeywords and Identifiers </h1>A keyword is a word whose meaning is defined by the programming language",
            "image": ""
        },
        {
            "id": "7",
            "lesson_id": "2",
            "media_type": "1",
            "text": "Keyword and \"goto\", \"const\", and others \"reserved words\", programmer may not use them as identifiers, it may cause compilation error.",
            "image": ""
        }, 
        {
            "id": "8",
            "lesson_id": "2",
            "media_type": "1",
            "text": "Keyword and \"goto\", \"const\", and others \"reserved words\", programmer may not use them as identifiers, it may cause compilation error.",
            "image": ""
        },
        {
            "id": "9",
            "lesson_id": "2",
            "media_type": "3",
            "text": "",
            "image": "image/image_2.png"
        },
        {
            "id": "10",
            "lesson_id": "2",
            "media_type": "1",
            "text": "An identifier is a word used by programmer to name a variable, method, class, or label. An identifier must begin with a letter, a dollar sign($), or underscore(_)",
            "image": ""
        }, 
       	{
            "id": "11",
            "lesson_id": "2",
            "media_type": "1",
            "text": "Some examples are : ",
            "image": ""
        }, 
       	{
            "id": "12",
            "lesson_id": "2",
            "media_type": "2",
            "text": "foobar\t\t\t// legal<br/>CAPclass\t// legal: embedded keywords are ok<br/>$incomeAfterTaxes\t\t// legal<br/>3_node5\t\t\t// illegal: starts with a digit<br/>!theCase\t\t// illegal: bad 1st char",
            "image": ""
        }, 
       	{
            "id": "13",
            "lesson_id": "2",
            "media_type": "1",
            "text": "Identifiers are case sensitive for example, \"iden\" and \"IDen\" are distinct identifiers.",
            "image": ""
        },
        {
            "id": "14",
            "lesson_id": "3",
            "media_type": "1",
            "text": "<h1>\tPrimitive Data Types</h1>A primitive is a simple non-object data type that represents a single value",
            "image": ""
        },
        {
            "id": "15",
            "lesson_id": "3",
            "media_type": "1",
            "text": "All java primitive type are : ",
            "image": ""
        },
        {
            "id": "16",
            "lesson_id": "3",
            "media_type": "2",
            "text": "<b>Type</b>\t\t\t\t\t\t\t\t\t\t\t\t<b>Size (bits)</b><br/>byte\t\t\t\t\t\t\t\t\t\t\t\t8<br/>char\t\t\t\t\t\t\t\t\t\t\t\t16<br/>short\t\t\t\t\t\t\t\t\t\t\t16<br/>int\t\t\t\t\t\t\t\t\t\t\t\t\t32<br/>float\t\t\t\t\t\t\t\t\t\t\t32<br/>double\t\t\t\t\t\t\t\t\t\t64<br/>long\t\t\t\t\t\t\t\t\t\t\t\t64",
            "image": ""
        },
        {
            "id": "17",
            "lesson_id": "3",
            "media_type": "1",
            "text": "And the range value : ",
            "image": ""
        },
       	{
            "id": "18",
            "lesson_id": "3",
            "media_type": "3",
            "text": "",
            "image": "image/image_3.png"
        },
        {
            "id": "19",
            "lesson_id": "3",
            "media_type": "3",
            "text": "",
            "image": "image/image_4.png"
        }
        ,{
            "id": "20",
            "lesson_id": "3",
            "media_type": "1",
            "text": "A char variable can't take the negative values, it is used to describe unicode character. primitive types can be divided into 2 groups : precise (boolean, byte, char, short, int, long) and non-precise(float and double)",
            "image": ""
        }
        ,{
            "id": "21",
            "lesson_id": "3",
            "media_type": "4",
            "text": "Note : You need to be careful to compare 2 non-precise data type variables (float and double), especially equal operator ",
            "image": ""
        }
        ,{
            "id": "22",
            "lesson_id": "4",
            "media_type": "1",
            "text": "<h1>\tLiterals</h1>A literal is a fixed-specified value of a primitive data type and also String data type.",
            "image": ""
        }
        ,{
            "id": "23",
            "lesson_id": "4",
            "media_type": "1",
            "text": "the below are some examples : ",
            "image": ""
        }
        ,{
            "id": "24",
            "lesson_id": "4",
            "media_type": "2",
            "text": "1. boolean oneBoolLiteral = <b>true</b>;<br/>2. byte byteVariable = <b>123</b>;<br/>3. char charVariable = <b>'C'</b>;<br/>4. double oneDoubleLiteral = <b>123.456D</b>;<br/>5. String oneStringLiteral = <b>\"Hello world\"</b>;",
            "image": ""
        }	
        ,{
            "id": "25",
            "lesson_id": "4",
            "media_type": "1",
            "text": "Java supports a few special characters: ",
            "image": ""
        }
        ,{
            "id": "26",
            "lesson_id": "4",
            "media_type": "1",
            "text": "\\n for new line<br/>\\r for return<br/>\\t for tab<br/>\\b for backspace<br/>\\f for formed<br/>\\' for single quote<br/>\\\\ for backsplash",
            "image": ""
        }
        ,{
            "id": "27",
            "lesson_id": "4",
            "media_type": "1",
            "text": "Integer literals may be assigned to any numeric primitive data type. There are 3 types : default is decimal, octal will start with a 0 (zero) prefix, and hexadecimal prefix with an 0x or 0X, and the hex digits are insensitve",
            "image": ""
        }
        ,{
            "id": "28",
            "lesson_id": "4",
            "media_type": "4",
            "text": "Note : the suffix F or f, indicating a float literal, such as 1.234f, the suffix D or d for a double literal, such as 12.34D",
            "image": ""
        }
        ,{
            "id": "29",
            "lesson_id": "5",
            "media_type": "1",
            "text": "<h1>\tArray</h1>A Java array is an ordered collection of primitives, object references or other arrays, all elements of an array must be of the same type",
            "image": ""
        }
        ,{
            "id": "30",
            "lesson_id": "5",
            "media_type": "1",
            "text": "\tTo create and use an array, you must follow three steps:<br/>1. Declaration<br/>2. Construction<br/>3. Initialization",
            "image": ""
        }
        ,{
            "id": "31",
            "lesson_id": "5",
            "media_type": "2",
            "text": "1. int[] ints;\t\t\t\t\t\t\t\t// Step 1 : Declaration to the compiler<br/>2. ints = new int[25];\t\t// Step 2 : Runtime construction",
            "image": ""
        }
        ,{
            "id": "32",
            "lesson_id": "5",
            "media_type": "1",
            "text": "Declaration and constructor may be formed in a single line : ",
            "image": ""
        }
        ,{
            "id": "33",
            "lesson_id": "5",
            "media_type": "2",
            "text": "1. int[] ints = new int[25];",
            "image": ""
        }
        ,{
            "id": "34",
            "lesson_id": "5",
            "media_type": "1",
            "text": "Declaration and constructor may be formed in a single line : ",
            "image": ""
        }
        ,{
            "id": "35",
            "lesson_id": "5",
            "media_type": "4",
            "text": "Note : When an array is constructed, its elements are automatically initialized to their default values. Numerical elements are initialized to 0 and object reference will be initialized to null;",
            "image": ""
        }
        ,{
            "id": "36",
            "lesson_id": "5",
            "media_type": "2",
            "text": "<b>Type</b>\t\t\t\t\t\t\t\t\t\t\t\t<b>Initial Value (bits)</b><br/>byte\t\t\t\t\t\t\t\t\t\t\t\t0<br/>int\t\t\t\t\t\t\t\t\t\t\t\t\t0<br/>float\t\t\t\t\t\t\t\t\t\t\t0.0F<br/>char\t\t\t\t\t\t\t\t\t\t\t\t\'\\u0000\'<br/>object\t\t\t\t\t\t\t\t\t\tnull<br/>short\t\t\t\t\t\t\t\t\t\t\t0<br/>long\t\t\t\t\t\t\t\t\t\t\t\t0L<br/>double\t\t\t\t\t\t\t\t\t\t0.0D<br/>boolean\t\t\t\t\t\t\t\tfalse",
            "image": ""
        }
        ,{
            "id": "37",
            "lesson_id": "5",
            "media_type": "1",
            "text": "You can also create a custom initialized array like this which elements are specified : ",
            "image": ""
        }
        ,{
            "id": "38",
            "lesson_id": "5",
            "media_type": "2",
            "text": "1. float[] diameters = {1.1f, 2.2f, 3.3f, 4.4f, 5.5f};",
            "image": ""
        }
        ,{
            "id": "39",
            "lesson_id": "5",
            "media_type": "1",
            "text": "The first element is at array index 0 :",
            "image": ""
        }
        ,{
            "id": "40",
            "lesson_id": "5",
            "media_type": "2",
            "text": "1. long[] squares;<br/>2. squares = new long[6000];<br/>3. for (int i = 0; i < 6000; i++) {<br/>4. \t\tsquares[i] = i * i;<br/>5. }",
            "image": ""
        }
        ,{
            "id": "41",
            "lesson_id": "6",
            "media_type": "1",
            "text": "The wrong way to think about multi-dimens array : the physical memory address of next row is right after the current row.",
            "image": ""
        }
        ,{
            "id": "42",
            "lesson_id": "6",
            "media_type": "3",
            "text": "",
            "image": "image/image_5.png"
        }
        ,{
            "id": "43",
            "lesson_id": "6",
            "media_type": "1",
            "text": "The right way to think about multi-dimens array : each row has a pointer point to diffirent memory address which is not right after previous row pointer.",
            "image": ""
        }
        ,{
            "id": "44",
            "lesson_id": "6",
            "media_type": "3",
            "text": "",
            "image": "image/image_6.png"
        }
        ,{
            "id": "45",
            "lesson_id": "6",
            "media_type": "1",
            "text": "That's why you can declare an array like this : ",
            "image": ""
        }
        ,{
            "id": "46",
            "lesson_id": "6",
            "media_type": "2",
            "text": "int[][] myInts = { {1, 2, 3}, {91, 92, 93, 94}, {2001, 2002} }",
            "image": ""
        }
        ,{
            "id": "47",
            "lesson_id": "7",
            "media_type": "1",
            "text": "<h1>The main() Method</h1>The main() method is the entry point for standalone Java applications",
            "image": ""
        }
        ,{
            "id": "47",
            "lesson_id": "7",
            "media_type": "1",
            "text": "To create an application, you write a class definition that includes a main() method. The signature for main() is :",
            "image": ""
        }
        ,{
            "id": "48",
            "lesson_id": "7",
            "media_type": "2",
            "text": "public static void main(String[] args)",
            "image": ""
        }
        ,{
            "id": "49",
            "lesson_id": "7",
            "media_type": "1",
            "text": "The main() method must be public so that the JVM can call it. It is static so that it can be executed without the necessity of constructing an instance of the application class. The return type must be void.",
            "image": ""
        }
        ,{
            "id": "50",
            "lesson_id": "7",
            "media_type": "1",
            "text": "The argument to main() is a single-dimension array of Strings, containing any arguments that the user might have entered on the command line",
            "image": ""
        }
		,{
            "id": "51",
            "lesson_id": "8",
            "media_type": "1",
            "text": "<h1>Variables and Initialization</h1>Java supports variables of three different lifetimes",
            "image": ""
        }
        ,{
            "id": "52",
            "lesson_id": "8",
            "media_type": "1",
            "text": "<b>1.</b> Member variable : A member variable of a class is created when an instance is created and it is destroyed when object is destroyed",
            "image": ""
        }
        ,{
            "id": "53",
            "lesson_id": "8",
            "media_type": "1",
            "text": "<b>1.</b> Member variable : A member variable of a class is created when an instance is created and it is destroyed when object is destroyed",
            "image": ""
        }
        ,{
            "id": "54",
            "lesson_id": "8",
            "media_type": "1",
            "text": "<b>1.</b> Member variable : A member variable of a class is created when an instance is created and it is destroyed when object is destroyed",
            "image": ""
        }
        ,{
            "id": "55",
            "lesson_id": "8",
            "media_type": "1",
            "text": "<b>3.</b> Member variable : A member variable of a class is created when an instance is created and it is destroyed when object is destroyed",
            "image": ""
        }
    ]
}